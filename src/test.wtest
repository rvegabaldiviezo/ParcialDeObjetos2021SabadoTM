import example.*

//### CASOS DE PRUEBA ##################################

//--> ARMAS
const pistola = new Revolver()
object disparo{
	method vaciarCartucho(_revolver){
		6.times{n => _revolver.usar(new Mafioso(rango=soldado, nombre="Carlos"))}
		return _revolver
	}
}
const pistolaSinBalas = disparo.vaciarCartucho(new Revolver())//NO ESTA EN CONDICIONES
const pistolaOxidadaSinBalas = disparo.vaciarCartucho(new RevolverOxidado())//NO ESTA EN CONDICIONES
const daga = new Daga(peligrosidadBase=2)//SIEMPRE ESTA EN BUENAS CONDICIONES
const cuerda = new CuerdaDePiano()

//--> MAFIOSOS DE LA FAMILIA LOS BUHOS
const juanSoldado = new Mafioso(rango=soldado, nombre ="Juan", armas=[new Daga(peligrosidadBase=2)]) // 2 de peligrosidad
const joseSoldadoRevolver = new Mafioso(rango=soldado, nombre ="Jose", armas=[new Revolver(), new Daga(peligrosidadBase=5), new Daga(peligrosidadBase=1)])// 12+5+1= 18 de peligrosidad
const josueSoldadoDaga = new Mafioso(rango=soldado, nombre ="Josue", armas=[new Daga(peligrosidadBase=5), new Revolver()])// 5+12= 17 de peligrosidad

const pedroSubjefe = new Mafioso(rango=subjefe, nombre ="Pedro", armas=[new CuerdaDePiano(), new Revolver(),new Daga(peligrosidadBase=3)])// 5+12+3= 20, 20*2 = 40 de peligrosidad
const nicoSubjefe = new Mafioso(rango=subjefe, nombre ="Nico", armas=[new CuerdaDePiano(estaTensa=false), pistolaSinBalas])// 1+1= 2, 2*2= 4 de peligrosidad
const leoDon = new Mafioso(rango=don, nombre ="Leo", armas=[new Revolver(),new CuerdaDePiano(), new Daga(peligrosidadBase=1)])// 12+5+1=18, 18+20= 38 de peligrosidad 

const miembrosDeLosBuhos = #{juanSoldado,joseSoldadoRevolver,josueSoldadoDaga,pedroSubjefe,nicoSubjefe,leoDon}
const familiaLosBuhos =  new Familia(miembros=miembrosDeLosBuhos)

//--> MAFIOSOS DE LA FAMILIA LAS LEONAS
const claudiaSoldado = new Mafioso(rango=soldado, nombre ="Claudia", armas=[new Daga(peligrosidadBase=2)])// 2 de peligrosidad
const claraSoldadoRevolver = new Mafioso(rango=soldado, nombre ="Clara", armas=[new Revolver(), new Daga(peligrosidadBase=5)])// 12+5= 17 de peligrosidad
const clarisaSoldadoDaga = new Mafioso(rango=soldado, nombre ="Clarisa", armas=[new Daga(peligrosidadBase=5), new Revolver()])// 5+12= 17 de peligrosidad

const paulaSubjefe = new Mafioso(rango=subjefe, nombre ="Paula", armas=[new CuerdaDePiano(estaTensa=false), new Revolver(),new Daga(peligrosidadBase=1)])// 1+12+1= 14, 14*2 = 28 de peligrosidad
const palomaSubjefe = new Mafioso(rango=subjefe, nombre ="Paloma", armas=[new CuerdaDePiano(estaTensa=false), pistolaSinBalas])// 1+1= 2, 2*2= 4 de peligrosidad
const lauraDon = new Mafioso(rango=don, nombre ="Laura", armas=[new Revolver(),new CuerdaDePiano(), new Daga(peligrosidadBase=1)])// 12+5+1=18, 18+20= 38 de peligrosidad 

const miembrosDeLasLeonas = #{claudiaSoldado,claraSoldadoRevolver,clarisaSoldadoDaga, paulaSubjefe,palomaSubjefe,lauraDon}
const familiaLasLeonas = new Familia(miembros=miembrosDeLasLeonas)

//### TEST DE ARMAS ##################################

//--> REVOLVER
describe "Test del efecto de un Revolver en una Persona"{
	test "Tiene una capacidad inicial de 6 balas"{
		assert.equals(6, pistola.cantidadDeBalas())	
	}
	test "Mata de un disparo porque esta en condiciones"{
		// Inicialmente esta en condiciones
		assert.equals(true, pistola.estaEnCondiciones())
		// Inicialmente la persona esta viva
		assert.equals(true, juanSoldado.estaVivo())
		// Le dispara a la persona una sola vez
		pistola.usar(juanSoldado)
		// La persona esta muerta porque recibio un disparo de un arma en condiciones
		assert.equals(false, juanSoldado.estaVivo())
		
	}
	test "No mata porque no esta en condiciones"{
		// Inicialmente esta en condiciones
		assert.equals(true, pistola.estaEnCondiciones())
		// Hace seis disparos contra este soldado
		6.times{n => pistola.usar(juanSoldado)}
		// No esta en condiciones
		assert.equals(false, pistola.estaEnCondiciones())
		// Usa el Revolver contra otra persona
		pistola.usar(pedroSubjefe)
		// La persona esta viva porque el revolver no estaba en condiciones
		assert.equals(true, pedroSubjefe.estaVivo())
	}
}
//--> DAGA
describe "Test del efecto de una Daga en una Persona"{
	test "Siempre esta en condiciones"{
		// Inicialmente esta en condiciones
		assert.equals(true, daga.estaEnCondiciones())
		// Hace 20 apuÃ±aladas seguidas
		20.times{n => daga.usar(juanSoldado)}
		// Sigue en condiciones
		assert.equals(true, daga.estaEnCondiciones())
	}
	test "Tiene que herir 4 veces a una persona sana para matarlo"{
		// Inicialmente la persona esta viva y no tiene heridas
		assert.equals(true, juanSoldado.estaVivo())
		assert.equals(0, juanSoldado.cantidadDeHeridas())
		// Lo hiere tres veces consecutivas y como es una persona sana no muere
		3.times{n => daga.usar(juanSoldado)}
		assert.equals(true, juanSoldado.estaVivo())
		// A la cuarta herida lo mata
		daga.usar(juanSoldado)
		assert.equals(false, juanSoldado.estaVivo())
	}	
}
//--> CUERDA DE PIANO 
describe "Test del efecto de una Cuerda de Piano en una Persona"{
	test "Mata a su victima, la cuerda esta en buenas condiciones"{
		//La cuerda esta tensa o en buenas condiciones 
		assert.equals(true,cuerda.estaEnCondiciones())
		// Inicialmente la persona esta viva
		assert.equals(true, juanSoldado.estaVivo())
		// Usa la cuerda en su victima
		cuerda.usar(juanSoldado)
		// La persona muere por el ataque con la cuerda
		assert.equals(false, juanSoldado.estaVivo())
	}
	test "NO Mata a su victima, la cuerda NO esta en buenas condiciones"{
		// Hacemos que la cuerda deje de estar tensa
		cuerda.estaTensa(false)
		// La cuerda no esta tensa, es decir, no esta en buenas condiciones 
		assert.equals(false,cuerda.estaEnCondiciones())
		// Inicialmente la persona esta viva y no tiene heridas
		assert.equals(true, juanSoldado.estaVivo())
		assert.equals(0, juanSoldado.cantidadDeHeridas())
		// Usa la cuerda en su victima
		cuerda.usar(juanSoldado)
		// La persona sigue viva pero recibio una herida despues del ataque con la cuerda
		assert.equals(true, juanSoldado.estaVivo())
		assert.equals(1, juanSoldado.cantidadDeHeridas())
	}
}
//--> EFECTO de las Armas en las Personas
describe "Test para comprobar las personas a la cuarta herida mueren"{	
	test "Las personas inicialmente esta vivo"{
		assert.equals(true, leoDon.estaVivo())
	}
	test "Las personas sobreviven hasta 3 heridas"{
		3.times{n => leoDon.herir()}
		assert.equals(true, leoDon.estaVivo())
	}
	test "Las personas a la cuarta herida mueren"{
		4.times{n => leoDon.herir()}
		assert.equals(false, leoDon.estaVivo())
	}	
}

//### TEST DE RANGOS ##################################

//--> DON
describe "Test del Don haciendo su trabajo"{
	test "Cuando hace su trabajo desarma a su victima"{
		// La victima inicialmente tiene armas
		assert.notEquals(0,juanSoldado.armas().size())
		// El don hace su trabajo en la victima
		leoDon.hacerSuTrabajo(juanSoldado)
		// La victima quedo desarmada
		assert.equals(0,juanSoldado.armas().size())
	}
}
//--> SUBJEFE
describe "Test del Subjefe haciendo su trabajo"{
	test "No tiene ninguna arma en condiciones y las que tiene solo pueden herirlo"{
		// No tiene armas en condiciones
		assert.equals(0, nicoSubjefe.cantidadDeArmasEnCondiciones())
		// Juan no tiene heridas
		assert.equals(0, juanSoldado.cantidadDeHeridas())
		// El Subjefe hace su trabajo con la primer arma, es una cuerda, no esta en condiciones, solo lo hiere
		nicoSubjefe.hacerSuTrabajo(juanSoldado)
		// Juan es herido
		assert.notEquals(0, juanSoldado.cantidadDeHeridas())
	}
	test "Le agregamos un revolver en condiciones, entonces, lo mata"{
		// Le agregamos un Arma en condiciones, es la ultima arma de la lista
		nicoSubjefe.armar(pistola)
		// Juan no tiene heridas, esta vivo
		assert.equals(0, juanSoldado.cantidadDeHeridas())
		// Usa la primer arma en condiciones que encuentre, es la pistola, asi que lo mata
		nicoSubjefe.hacerSuTrabajo(juanSoldado)
		// La victima murio
		assert.equals(false,juanSoldado.estaVivo())
	}
}
//--> SOLDADO
describe "Test del Soldado haciendo su trabajo"{
	test "Jose usa la primer arma que tiene, es una pistola que mata a su victima"{
		// Juan esta vivo
		assert.equals(true, juanSoldado.estaVivo())
		// El Soldado Jose usa su primer arma, es un revolver en condiciones, entonces lo mata
		joseSoldadoRevolver.hacerSuTrabajo(juanSoldado)
		// Juan esta muerto
		assert.equals(false, juanSoldado.estaVivo())
	}
	test "Josue usa la primer arma que tiene, es una daga que hiere a su victima"{
		// Juan no tiene heridas
		assert.equals(0, juanSoldado.cantidadDeHeridas())
		// El Soldado Josue usa su primer arma, es una Daga, entonces lo hiere
		josueSoldadoDaga.hacerSuTrabajo(juanSoldado)
		// Juan fue herido
		assert.notEquals(0, juanSoldado.cantidadDeHeridas())
	}
}

//### TEST DE ACCION ##################################

//--> PUNTO A
describe "Test del punto A: Durmiendo con los Peces"{
	test "El mafioso esta vivo"{
		//Es herido 3 veces, entonces, sigue vivo
		3.times{n => leoDon.herir()}
		assert.equals(true, leoDon.estaVivo())
	}
	test "El mafioso NO esta vivo, lo mataron"{
		//Es herido 4 veces, entonces, murio
		4.times{n => leoDon.herir()}
		assert.equals(false, leoDon.estaVivo())
	}
}
//--> PUNTO B
describe "Test del punto B: Peligrosidad y Peligrosidad Base de las armas"{
	test "La PELIGROSIDAD de cualquier arma que no este en condiciones es 1 (uno), salvo las dagas"{
		assert.equals(1,pistolaSinBalas.peligrosidad())
		assert.equals(1,pistolaOxidadaSinBalas.peligrosidad())
		assert.equals(1,(new CuerdaDePiano(estaTensa=false)).peligrosidad())
	}
	test "La Peligrosidad Base de un Revolver de seis balas es 12, esta en condiciones"{
		assert.equals(12, pistola.peligrosidadBase())
	}
	test "La Peligrosidad Base de un Revolver Oxidado de seis balas es 6 (mitad de la de un revolver comun), esta en condiciones"{
		assert.equals(6, (new RevolverOxidado()).peligrosidadBase())	
	}
	test "La peligrosidad Base de una Daga es 7, se la instancio con este valor, esta en condiciones"{
		assert.equals(7, (new Daga(peligrosidadBase=7)).peligrosidadBase())	
	}
	test "La peligrosidad Base de una Cuerda de Piano es 5, esta en condiciones"{
		assert.equals(5, cuerda.peligrosidadBase())	
	}
}

describe "Test del punto B: El mÃ¡s peligroso"{
	test "El mafioso mas peligroso de la Familia los Buhos es Pedro, tiene 40 puntos de Nivel de Peligrosidad"{
		//Peligrosidad de cada Miembro
		assert.equals(2, juanSoldado.nivelDeIntimidacion())
		assert.equals(18, joseSoldadoRevolver.nivelDeIntimidacion())
		assert.equals(17, josueSoldadoDaga.nivelDeIntimidacion())
		assert.equals(40, pedroSubjefe.nivelDeIntimidacion())
		assert.equals(4, nicoSubjefe.nivelDeIntimidacion())
		assert.equals(38, leoDon.nivelDeIntimidacion())
		//El mas peligroso es Pedro
		assert.equals("Pedro",familiaLosBuhos.elMasPeligroso().nombre())
	}
	test "El mafioso mas peligroso de la Familia las Leonas es Laura, tiene 38 puntos de Nivel de Peligrosidad"{
		//Peligrosidad de cada Miembro
		assert.equals(2, claudiaSoldado.nivelDeIntimidacion())
		assert.equals(17, claraSoldadoRevolver.nivelDeIntimidacion())
		assert.equals(17, clarisaSoldadoDaga.nivelDeIntimidacion())
		assert.equals(28, paulaSubjefe.nivelDeIntimidacion())
		assert.equals(4, palomaSubjefe.nivelDeIntimidacion())
		assert.equals(38, lauraDon.nivelDeIntimidacion())
		//El mas peligroso es Laura 
		assert.equals("Laura",familiaLasLeonas.elMasPeligroso().nombre())
	}
}


//--> PUNTO C
describe "Test del punto C: Ataque sorpresa, al mas peligroso de cada familia"{
	test "De la familia los Buhos es atacado Pedro, por clarisa que es un soldado, solo lo hiere porque usa una daga"{
		// Pedro inicialmente no tiene heridas
		assert.equals(0, pedroSubjefe.cantidadDeHeridas())
		// Pedro es atacado por ser el mas peligroso de su familia
		clarisaSoldadoDaga.ataqueSorpresa(familiaLosBuhos)
		// Pedro tiene una herida
		assert.equals(1, pedroSubjefe.cantidadDeHeridas())
	}
	test "De la familia los Buhos es atacado Pedro, por paula que es un Subjefe, lo mata porque usa un revolver en condiciones"{
		// Pedro inicialmente esta vivo
		assert.equals(true, pedroSubjefe.estaVivo())
		// Pedro es atacado por ser el mas peligroso de su familia
		paulaSubjefe.ataqueSorpresa(familiaLosBuhos)
		// Pedro muere
		assert.equals(false, pedroSubjefe.estaVivo())
	}
	test "De la familia las Leonas es atacada Laura por Juan que es un soldado, solo lo hiere porque usa una daga"{
		// Laura inicialmente no tiene heridas
		assert.equals(0, lauraDon.cantidadDeHeridas())
		// Laura es atacada por ser la mas peligroso de su familia
		juanSoldado.ataqueSorpresa(familiaLasLeonas)
		// Laura tiene una herida
		assert.equals(1, lauraDon.cantidadDeHeridas())
	}
	test "De la familia las Leonas es atacada Laura por Leo que es el Don, no la mata, solo la desarma"{
		// Laura inicialmente tiene sus armas
		assert.notEquals(0, lauraDon.armas().size())
		// Laura es atacado por ser la mas peligrosa de su familia
		leoDon.ataqueSorpresa(familiaLasLeonas)
		// Laura queda desarmada, esta viva y sin heridas
		assert.equals(0, lauraDon.armas().size())
		assert.equals(true, lauraDon.estaVivo())
		assert.equals(0, lauraDon.cantidadDeHeridas())
	}
}

//--> PUNTO D
describe "Test del punto D: Luto"{
	test "El don Laura esta viva, por hacer su Luto se lanza un excepcion"{
		// Laura es el Don de la Familia de las Leonas y esta viva
		assert.equals(true, lauraDon.estaVivo())
		// Como no esta muerta debe arrojar una excepcion con este mensaje
		assert.throwsExceptionWithMessage("El Don esta vivo por lo que no debe haber Luto",{familiaLasLeonas.luto()})
	}
	test "El don Leo esta muerto, por hacer su Luto se recategorizan sus miembros"{
		// El don inicialmente esta vivo
		assert.equals(true, familiaLosBuhos.elDonEstaVivo())
		// El Don es atacado y muere
		pistola.usar(leoDon)
		// Leo no esta vivo
		assert.equals(false,familiaLosBuhos.elDonEstaVivo())
		// Su familia hace luto
		familiaLosBuhos.luto()
		// Sus miembros se recategorizan, el Soldado Jose pasa a subjefe, los demas siguen siendo soldados
		assert.equals(subjefe, joseSoldadoRevolver.rango())
		assert.equals(soldado, josueSoldadoDaga.rango())
		assert.equals(soldado, juanSoldado.rango())  
		// Sus miembros se recategorizan, el Subjefe Nico pasa a soldado, pero Pedro es el nuevo Don
		assert.equals(don, pedroSubjefe.rango())
		assert.equals(soldado, nicoSubjefe.rango())
	}
	//const miembrosDeLosBuhos = #{juanSoldado,joseSoldadoRevolver,josueSoldadoDaga,pedroSubjefe,nicoSubjefe,leoDon}
	
	test "El don Leo esta muerto, por hacer su Luto todos los miembros vivos acondicionan sus armas y reciben un nuevo revolver acondicionado"{
		// De la Familia de los Buhos solo dejamos vivo al Subjefe Nico, tiene dos armas, ninguna en condiciones
		pistola.usar(juanSoldado); assert.equals(false, juanSoldado.estaVivo())
		pistola.usar(joseSoldadoRevolver); assert.equals(false, joseSoldadoRevolver.estaVivo())
		pistola.usar(josueSoldadoDaga); assert.equals(false, josueSoldadoDaga.estaVivo())
		pistola.usar(pedroSubjefe); assert.equals(false, pedroSubjefe.estaVivo())
		pistola.usar(leoDon); assert.equals(false, familiaLosBuhos.elDonEstaVivo())
		assert.equals(true, nicoSubjefe.estaVivo())
		// Nico tiene solo dos armas y ninguna en condiciones
		assert.equals(2,nicoSubjefe.armas().size())
		assert.equals(0, nicoSubjefe.cantidadDeArmasEnCondiciones())
		// Su familia hace luto, entonces, se acondicionan las Armas de Nico
		familiaLosBuhos.luto()
		// Nico tiene todas sus armas acondicionadas
		assert.equals(3, nicoSubjefe.cantidadDeArmasEnCondiciones())
	}
	test "El don Leo esta muerto, Pedro es nombrado como nuevo Don, es el mafioso vivo mas peligroso"{
		// De la Familia de los Buhos solo el don esta muerto
		assert.equals(true, juanSoldado.estaVivo())
		assert.equals(true, joseSoldadoRevolver.estaVivo())
		assert.equals(true, josueSoldadoDaga.estaVivo())
		assert.equals(true, pedroSubjefe.estaVivo())
		pistola.usar(leoDon); assert.equals(false, leoDon.estaVivo())
		assert.equals(true, nicoSubjefe.estaVivo())
		// Pedro es un Subjefe 
		assert.equals(subjefe, pedroSubjefe.rango())
		// Su familia hace luto, entonces, Pedro pasa ser el nuevo Don
		familiaLosBuhos.luto()
		// Pedro es el nuevo don
		assert.equals(don, pedroSubjefe.rango())
		assert.equals("Pedro", familiaLosBuhos.elDon().nombre())
	}
}

//--> PUNTO D
describe "Test del punto E: Gustos Rusticos"{
	test "Los revolveres oxidados tienen una peligrosidad base que es la mitad de un revolver comun"{
		// Peligrosidad Base de un Revolver Comun en condiciones
		assert.equals(12, new Revolver().peligrosidadBase())
		// Peligrosidad Base de un Revolver Oxidado en condiciones
		assert.equals(6, new RevolverOxidado().peligrosidadBase())
	}
	test "Uno de cada tres disparos hiere en vez de matar a la vÃ­ctima"{
		const revolverOxidado = new RevolverOxidado()

		const primerasTresVictimas = [new Mafioso(rango=soldado, nombre ="Victima1"),
		new Mafioso(rango=soldado, nombre ="Victima2"), new Mafioso(rango=soldado, nombre ="Victima3")]

		const ultimasTresVictimas = [new Mafioso(rango=soldado, nombre ="Victima4"),
		new Mafioso(rango=soldado, nombre ="Victima5"), new Mafioso(rango=soldado, nombre ="Victima6")]

		// Dispara a consecutivamente a las primerasTresVictimas
		primerasTresVictimas.forEach{ victima => revolverOxidado.usar(victima)}
			// Solo puede haber una victima viva, las otras dos murieron, no importa el orden 
			assert.equals(2,primerasTresVictimas.count{victima => !victima.estaVivo()})
			assert.equals(1,primerasTresVictimas.count{victima => victima.cantidadDeHeridas()==1})
		// Dispara a consecutivamente a las ultimasTresVictimas
		ultimasTresVictimas.forEach{ victima => revolverOxidado.usar(victima)}
			// Solo puede haber una victima viva, las otras dos murieron, no importa el orden 
			assert.equals(2,ultimasTresVictimas.count{victima => !victima.estaVivo()})
			assert.equals(1,ultimasTresVictimas.count{victima => victima.cantidadDeHeridas()==1})
	} 
}

describe "Test del punto E (con otro planteo de RevolverOxidado, plantearon mis compaÃ±eros del curso): Gustos Rusticos"{
	test "Los revolveres oxidados tienen una peligrosidad base que es la mitad de un revolver comun"{
		// Peligrosidad Base de un Revolver Comun en condiciones
		assert.equals(12, new Revolver().peligrosidadBase())
		// Peligrosidad Base de un Revolver Oxidado en condiciones
		assert.equals(6, new Revolver_Oxidado().peligrosidadBase())
	}
	/* TENER EN CUENTA QUE ESTA VERSION DE REVOLVER OXIDADO SI SE CORRE ESTE MISMO TEST VARIAS VECES,
	 * SE PUEDE APRECIAR QUE TIENE FALLAS, LA OTRA VERSION LA CORRES N VECES Y NO LAS TIENE
	 */
	
	test "Uno de cada tres disparos hiere en vez de matar a la vÃ­ctima"{
		const revolverOxidado = new Revolver_Oxidado()

		const primerasTresVictimas = [new Mafioso(rango=soldado, nombre ="Victima1"),
		new Mafioso(rango=soldado, nombre ="Victima2"), new Mafioso(rango=soldado, nombre ="Victima3")]

		const ultimasTresVictimas = [new Mafioso(rango=soldado, nombre ="Victima4"),
		new Mafioso(rango=soldado, nombre ="Victima5"), new Mafioso(rango=soldado, nombre ="Victima6")]

		// Dispara a consecutivamente a las primerasTresVictimas
		primerasTresVictimas.forEach{ victima => revolverOxidado.usar(victima)}
			// Solo puede haber una victima viva, las otras dos murieron, no importa el orden 
			assert.equals(2,primerasTresVictimas.count{victima => !victima.estaVivo()})
			assert.equals(1,primerasTresVictimas.count{victima => victima.cantidadDeHeridas()==1})
		// Dispara a consecutivamente a las ultimasTresVictimas
		ultimasTresVictimas.forEach{ victima => revolverOxidado.usar(victima)}
			// Solo puede haber una victima viva, las otras dos murieron, no importa el orden 
			assert.equals(2,ultimasTresVictimas.count{victima => !victima.estaVivo()})
			assert.equals(1,ultimasTresVictimas.count{victima => victima.cantidadDeHeridas()==1})
	} 
}
